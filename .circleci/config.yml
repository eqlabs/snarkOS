version: 2.1

commands:

  setup_environment:
    description: "Setup testing environment"
    parameters:
      cache_key:
        type: string
        default: snarkos-stable-cache
    steps:
      - run: set -e
      - run:
          name: Prepare environment and install dependencies
          command: |
            DEBIAN_FRONTEND=noninteractive sudo apt-get update
            DEBIAN_FRONTEND=noninteractive sudo apt-get dist-upgrade -y -o DPkg::Options::=--force-confold
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends clang llvm-dev llvm pkg-config xz-utils make libssl-dev libssl-dev
            
            cargo install --locked cargo-llvm-cov
            
            mkdir -p "$CIRCLE_WORKING_DIRECTORY/.bin"
            export PATH="$PATH:$CIRCLE_WORKING_DIRECTORY/.bin"
            
            curl -Os https://cli.codecov.io/latest/linux/codecov
            sudo chmod +x codecov
            mv codecov $CIRCLE_WORKING_DIRECTORY/.bin/codecov
            
            export SCCACHE_CACHE_SIZE=200M
            export WORK_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            export SCCACHE_DIR="$CIRCLE_WORKING_DIRECTORY/.cache/sccache"
            wget https://github.com/mozilla/sccache/releases/download/v0.3.0/sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz
            tar -C "$CIRCLE_WORKING_DIRECTORY/.bin" -xvf sccache-v0.3.0-x86_64-unknown-linux-musl.tar.gz
            mv $CIRCLE_WORKING_DIRECTORY/.bin/sccache-v0.3.0-x86_64-unknown-linux-musl/sccache $CIRCLE_WORKING_DIRECTORY/.bin/sccache
            export RUSTC_WRAPPER="sccache"
            
            rm -rf "$CIRCLE_WORKING_DIRECTORY/.cargo/registry"
      - restore_cache:
          keys:
            - << parameters.cache_key >>

  clear_environment:
    description: "Clear environment"
    parameters:
      cache_key:
        type: string
        default: snarkos-stable-cache
    steps:
      - run: (sccache -s||true)
      - run: set +e
      - save_cache:
          key: << parameters.cache_key >>
          paths:
            - .cache/sccache
            - .cargo

  run_serial:
    description: "Build and run tests"
    parameters:
      workspace_member:
        type: string
      cache_key:
        type: string
      flags:
        type: string
        default: ""
    steps:
      - checkout
      - setup_environment:
          cache_key: << parameters.cache_key >>
      - run:
          no_output_timeout: 60m
          command: |
            cd << parameters.workspace_member >>
            RUST_MIN_STACK=67108864 CARGO_LLVM_COV_SETUP=yes cargo llvm-cov test --no-clean --release --codecov --ignore-run-fail --output-path codecov.json << parameters.flags >>
      - run:
          name: Upload results to Codecov
          command: |
            $CIRCLE_WORKING_DIRECTORY/.bin/codecov upload-process --token $CODECOV_TOKEN --commit-sha $CIRCLE_SHA1 --slug eqlabs/snarkOS --git-service github
      - clear_environment:
          cache_key: << parameters.cache_key >>

  run_serial_long:
    description: "Build and run long running tests"
    parameters:
      workspace_member:
        type: string
      cache_key:
        type: string
      flags:
        type: string
        default: ""
    steps:
      - checkout
      - setup_environment:
          cache_key: << parameters.cache_key >>
      - run:
          no_output_timeout: 300m
          command: cd << parameters.workspace_member >> && RUST_MIN_STACK=67108864 cargo test << parameters.flags >>
      - clear_environment:
          cache_key: << parameters.cache_key >>

  run_parallel:
    description: "Build and run tests (in parallel)"
    parameters:
      workspace_member:
        type: string
      cache_key:
        type: string
      flags:
        type: string
        default: ""
    steps:
      - checkout
      - setup_environment:
          cache_key: << parameters.cache_key >>
      - run:
          no_output_timeout: 45m
          command: |
            cd << parameters.workspace_member >>
            cargo test -- --list --format terse | sed 's/: test//' > test_names.txt
            TEST_NAMES=$(circleci tests split test_names.txt)
            for i in $(echo $TEST_NAMES | sed "s/ / /g")
            do
                RUST_MIN_STACK=67108864 cargo test $i << parameters.flags >>
            done
      - clear_environment:
          cache_key: << parameters.cache_key >>

  install_rust_nightly:
    description: "Install Rust nightly toolchain"
    steps:
      - run: rustup toolchain install nightly-x86_64-unknown-linux-gnu

jobs:
  integration:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial_long:
          workspace_member: .integration
          cache_key: snarkos-integration-cache

  snarkos:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: .
          cache_key: snarkos-stable-cache

  account:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: account
          cache_key: snarkos-account-cache

  cli:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: cli
          cache_key: snarkos-cli-cache

  display:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: display
          cache_key: snarkos-display-cache

  node:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node
          cache_key: snarkos-node-cache

  node-bft:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/bft
          cache_key: snarkos-node-bft-cache

  node-bft-events:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/bft/events
          cache_key: snarkos-node-bft-events-cache

  node-bft-ledger-service:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/bft/ledger-service
          cache_key: snarkos-node-bft-ledger-service-cache

  node-bft-storage-service:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/bft/storage-service
          cache_key: snarkos-node-bft-storage-service-cache

  node-cdn:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/cdn
          cache_key: snarkos-node-cdn-cache

  node-consensus:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/consensus
          cache_key: snarkos-node-consensus-cache

  node-rest:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/rest
          cache_key: snarkos-node-rest-cache

  node-router:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/router
          cache_key: snarkos-node-router-cache

  node-router-messages:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/router/messages
          cache_key: snarkos-node-router-messages-cache

  node-sync:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/sync
          cache_key: snarkos-node-sync-cache

  node-sync-communication-service:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/sync/communication-service
          cache_key: snarkos-node-sync-communication-service-cache

  node-sync-locators:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/sync/locators
          cache_key: snarkos-node-sync-locators-cache

  node-tcp:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run_serial:
          workspace_member: node/tcp
          cache_key: snarkos-node-tcp-cache

  check-fmt:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - checkout
      - install_rust_nightly
      - setup_environment:
          cache_key: snarkos-fmt-cache
      - run:
          name: Check style
          no_output_timeout: 35m
          command: cargo +nightly fmt --all -- --check
      - clear_environment:
          cache_key: snarkos-fmt-cache

  check-clippy:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - checkout
      - setup_environment:
          cache_key: snarkos-clippy-cache
      - run:
          name: Check lint
          no_output_timeout: 35m
          command: |
            cargo clippy --workspace --all-targets -- -D warnings
            cargo clippy --workspace --all-targets --all-features -- -D warnings
      - clear_environment:
          cache_key: snarkos-clippy-cache

  test-runner:
    machine: true
    resource_class: exbuhny4gnr1bjbjxfghd7/gcp-test
    steps:
      - run: echo "Hi I'm on a Container Runner!"

workflows:
  version: 2

  main-workflow:
    jobs:
      - test-runner
      - cli
      - account
      - node-bft-events
      - node-tcp
      - check-fmt
      - check-clippy
